---
- name: Get current addons state
  become: true
  ansible.builtin.command:
    argv:
      - /snap/bin/microk8s.status
      - --format
      - yaml
  changed_when: false
  register: microk8s_status
  check_mode: false

- name: Set current state fact
  ansible.builtin.set_fact:
    microk8s_status: "{{ microk8s_status.stdout | from_yaml }}"

- name: Enable addons
  # become: true
  ansible.builtin.command:
    argv:
      - /snap/bin/microk8s.enable
      - "{{ item.name }}{% if microk8s_plugins[item.name] != true %}:{{ microk8s_plugins[item.name] }}{% endif %}"
  loop: "{{ microk8s_status.addons }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.status == 'disabled'
    - item.name in microk8s_plugins
    - microk8s_plugins[item.name]
  register: addons_work
  changed_when:
    - "'Enabling' in addons_work.stdout"
    - "'Installing' in addons_work.stdout"

- name: Disable addons
  become: true
  ansible.builtin.command:
    argv:
      - /snap/bin/microk8s.enable
      - "{{ item.name }}"
  loop: "{{ microk8s_status.addons }}"
  loop_control:
    label: "{{ item.name }}"
  when:
    - item.status == 'enabled'
    - item.name in microk8s_plugins
    - not microk8s_plugins[item.name]
  register: addons_work_dis
  changed_when:
    - "'Disabling' in addons_work_dis.stdout"
    - "'Uninstalling' in addons_work_dis.stdout"

- name: Add external IP in microk8s config
  become: true
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    insertbefore: "^#MOREIPS$"
    line: "IP.99 = {{ ansible_facts.ipify_public_ip }}"
  notify: Refresh certificates

- name: Add external FQDN in microk8s config
  become: true
  ansible.builtin.lineinfile:
    path: /var/snap/microk8s/current/certs/csr.conf.template
    insertbefore: "^IP.1.*"
    line: "DNS.99 = {{ microk8s_external_fqdn }}"
  when: "microk8s_external_fqdn is defined and microk8s_external_fqdn|length>0"
  notify: Refresh certificates
